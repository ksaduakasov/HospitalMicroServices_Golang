// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hospitalpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepartmentServiceClient is the client API for DepartmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentServiceClient interface {
	GetDoctors(ctx context.Context, in *DoctorsRequest, opts ...grpc.CallOption) (DepartmentService_GetDoctorsClient, error)
	GetDepartmentByDiseaseId(ctx context.Context, in *DepartmentRequest, opts ...grpc.CallOption) (*DepartmentResponse, error)
}

type departmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentServiceClient(cc grpc.ClientConnInterface) DepartmentServiceClient {
	return &departmentServiceClient{cc}
}

func (c *departmentServiceClient) GetDoctors(ctx context.Context, in *DoctorsRequest, opts ...grpc.CallOption) (DepartmentService_GetDoctorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DepartmentService_ServiceDesc.Streams[0], "/grpc.DepartmentService/GetDoctors", opts...)
	if err != nil {
		return nil, err
	}
	x := &departmentServiceGetDoctorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DepartmentService_GetDoctorsClient interface {
	Recv() (*DoctorsResponse, error)
	grpc.ClientStream
}

type departmentServiceGetDoctorsClient struct {
	grpc.ClientStream
}

func (x *departmentServiceGetDoctorsClient) Recv() (*DoctorsResponse, error) {
	m := new(DoctorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *departmentServiceClient) GetDepartmentByDiseaseId(ctx context.Context, in *DepartmentRequest, opts ...grpc.CallOption) (*DepartmentResponse, error) {
	out := new(DepartmentResponse)
	err := c.cc.Invoke(ctx, "/grpc.DepartmentService/GetDepartmentByDiseaseId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentServiceServer is the server API for DepartmentService service.
// All implementations must embed UnimplementedDepartmentServiceServer
// for forward compatibility
type DepartmentServiceServer interface {
	GetDoctors(*DoctorsRequest, DepartmentService_GetDoctorsServer) error
	GetDepartmentByDiseaseId(context.Context, *DepartmentRequest) (*DepartmentResponse, error)
	mustEmbedUnimplementedDepartmentServiceServer()
}

// UnimplementedDepartmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDepartmentServiceServer struct {
}

func (UnimplementedDepartmentServiceServer) GetDoctors(*DoctorsRequest, DepartmentService_GetDoctorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDoctors not implemented")
}
func (UnimplementedDepartmentServiceServer) GetDepartmentByDiseaseId(context.Context, *DepartmentRequest) (*DepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentByDiseaseId not implemented")
}
func (UnimplementedDepartmentServiceServer) mustEmbedUnimplementedDepartmentServiceServer() {}

// UnsafeDepartmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentServiceServer will
// result in compilation errors.
type UnsafeDepartmentServiceServer interface {
	mustEmbedUnimplementedDepartmentServiceServer()
}

func RegisterDepartmentServiceServer(s grpc.ServiceRegistrar, srv DepartmentServiceServer) {
	s.RegisterService(&DepartmentService_ServiceDesc, srv)
}

func _DepartmentService_GetDoctors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DoctorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DepartmentServiceServer).GetDoctors(m, &departmentServiceGetDoctorsServer{stream})
}

type DepartmentService_GetDoctorsServer interface {
	Send(*DoctorsResponse) error
	grpc.ServerStream
}

type departmentServiceGetDoctorsServer struct {
	grpc.ServerStream
}

func (x *departmentServiceGetDoctorsServer) Send(m *DoctorsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DepartmentService_GetDepartmentByDiseaseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetDepartmentByDiseaseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DepartmentService/GetDepartmentByDiseaseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetDepartmentByDiseaseId(ctx, req.(*DepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepartmentService_ServiceDesc is the grpc.ServiceDesc for DepartmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepartmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DepartmentService",
	HandlerType: (*DepartmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDepartmentByDiseaseId",
			Handler:    _DepartmentService_GetDepartmentByDiseaseId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDoctors",
			Handler:       _DepartmentService_GetDoctors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/hospital.proto",
}
